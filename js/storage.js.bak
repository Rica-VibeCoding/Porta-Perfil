/**
 * Módulo de armazenamento - Gerencia o salvamento e carregamento de configurações
 */
import { obterConfiguracaoAtual, atualizarConfiguracao } from './initialize.js';
import { atualizarDesenho } from './drawing.js';
import { mostrarNotificacao } from './notifications.js';
import { updateDobradicaInputs } from './form-handlers.js';

// Chave para armazenar configurações no localStorage
const STORAGE_KEY = 'conecta_portas_configs';
const LAST_CONFIG_KEY = 'conecta_ultima_config';
const LOGO_KEY = 'logo_empresa';

/**
 * Inicializa o sistema de armazenamento
 * @param {boolean} [carregarUltima=true] - Se verdadeiro, carrega a última configuração usada
 */
function inicializarArmazenamento(carregarUltima = true) {
  // Carregar configurações salvas no modal
  carregarConfiguracoesNoModal();
    
  // Configurar botão de salvar
  const btnSalvar = document.querySelector('.modal-content button');
  if (btnSalvar) {
    btnSalvar.addEventListener('click', salvarConfiguracaoAtual);
  }
    
  // Carregar última configuração usada
  if (carregarUltima) {
    try {
      carregarUltimaConfiguracao();
    }
    catch (e) {
      console.warn('Erro ao carregar última configuração:', e);
    }
  }
  else {
    console.log('Carregamento da última configuração adiado para evitar erro de SVG não inicializado');
  }
}

/**
 * Carrega as configurações salvas no modal
 */
function carregarConfiguracoesNoModal() {
  const savedConfigs = document.getElementById('savedConfigs');
  if (!savedConfigs) {
    return;
  }
    
  // Limpar conteúdo existente
  savedConfigs.innerHTML = '';
    
  // Obter configurações salvas
  const configs = obterTodasConfiguracoes();
    
  if (configs.length === 0) {
    // Mostrar mensagem se não houver configurações
    const mensagem = document.createElement('p');
    mensagem.textContent = 'Nenhuma configuração salva.';
    mensagem.style.fontStyle = 'italic';
    mensagem.style.color = '#666';
    savedConfigs.appendChild(mensagem);
    return;
  }
    
  // Criar lista de configurações
  const lista = document.createElement('ul');
  lista.className = 'config-list';
    
  configs.forEach(config => {
    const item = criarItemConfiguracao(config);
    lista.appendChild(item);
  });
    
  savedConfigs.appendChild(lista);
}

/**
 * Cria um item na lista de configurações
 * @param {Object} config - Configuração a ser exibida
 * @returns {HTMLElement} - Elemento de lista
 */
function criarItemConfiguracao(config) {
  const item = document.createElement('li');
    
  // Dados da configuração
  const nome = document.createElement('span');
  nome.className = 'config-name';
  nome.textContent = config.nome;
    
  const info = document.createElement('span');
  info.className = 'config-info';
  info.textContent = `${config.dados.largura}×${config.dados.altura}mm`;
    
  const data = document.createElement('span');
  data.className = 'config-date';
  data.textContent = new Date(config.data).toLocaleDateString('pt-BR');
    
  // Botões de ação
  const acoes = document.createElement('div');
  acoes.className = 'config-actions';
    
  const btnCarregar = document.createElement('button');
  btnCarregar.textContent = 'Carregar';
  btnCarregar.className = 'btn-load';
  btnCarregar.addEventListener('click', () => carregarConfiguracao(config.id));
    
  const btnExcluir = document.createElement('button');
  btnExcluir.textContent = 'Excluir';
  btnExcluir.className = 'btn-delete';
  btnExcluir.addEventListener('click', () => excluirConfiguracao(config.id));
    
  // Montar o item
  acoes.appendChild(btnCarregar);
  acoes.appendChild(btnExcluir);
    
  item.appendChild(nome);
  item.appendChild(info);
  item.appendChild(data);
  item.appendChild(acoes);
    
  return item;
}

/**
 * Salva a configuração atual com o nome especificado
 */
function salvarConfiguracaoAtual() {
  const configName = document.getElementById('configName');
  if (!configName) {
    return;
  }
    
  const nome = configName.value.trim();
  if (!nome) {
    mostrarNotificacao('Por favor, informe um nome para a configuração.', 'erro');
    return;
  }
    
  // Obter configuração atual
  const configAtual = obterConfiguracaoAtual();
    
  // Preparar dados para salvar
  const configuracao = {
    id: Date.now().toString(),
    nome: nome,
    data: new Date().toISOString(),
    dados: configAtual
  };
    
  // Salvar configuração
  salvarConfiguracao(configuracao);
    
  // Limpar campo de nome
  configName.value = '';
    
  // Atualizar lista de configurações
  carregarConfiguracoesNoModal();
    
  // Fechar modal
  const modal = document.getElementById('configModal');
  if (modal) {
    modal.style.display = 'none';
  }
    
  // Mostrar notificação
  mostrarNotificacao('Configuração salva com sucesso!');
}

/**
 * Salva uma configuração no armazenamento
 * @param {Object} config - Configuração a ser salva
 * @returns {boolean} - true se salvou com sucesso, false caso contrário
 */
function salvarConfiguracao(config) {
  try {
    // Preparar dados para salvar
    const configuracao = {
      id: Date.now().toString(),
      data: new Date().toISOString(),
      dados: config
    };

    // Obter configurações existentes
    const configs = obterTodasConfiguracoes();
        
    // Adicionar nova configuração
    configs.push(configuracao);
        
    // Salvar no localStorage
    localStorage.setItem(STORAGE_KEY, JSON.stringify(configs));
        
    // Salvar também como última configuração usada
    localStorage.setItem(LAST_CONFIG_KEY, JSON.stringify(configuracao));
        
    return true;
  }
  catch (e) {
    console.error('Erro ao salvar configuração:', e);
    mostrarNotificacao('Erro ao salvar configuração.', 'erro');
    return false;
  }
}

/**
 * Carrega uma configuração pelo ID
 * @param {string} id - ID da configuração
 */
function carregarConfiguracao(id) {
  // Obter todas as configurações
  const configs = obterTodasConfiguracoes();
    
  // Encontrar a configuração pelo ID
  const config = configs.find(c => c.id === id);
  if (!config) {
    // Removendo a notificação de erro
    console.log('Tentativa de carregar configuração inexistente:', id);
    return;
  }
    
  // Aplicar a configuração
  aplicarConfiguracao(config.dados);
    
  // Salvar como última configuração usada
  try {
    localStorage.setItem(LAST_CONFIG_KEY, JSON.stringify(config));
  }
  catch (e) {
    console.warn('Erro ao salvar última configuração:', e);
  }
    
  // Fechar modal
  const modal = document.getElementById('configModal');
  if (modal) {
    modal.style.display = 'none';
  }
    
  // Mostrar notificação
  mostrarNotificacao(`Configuração "${config.nome}" carregada com sucesso!`);
}

/**
 * Exclui uma configuração pelo ID
 * @param {string} id - ID da configuração
 */
function excluirConfiguracao(id) {
  // Obter todas as configurações
  let configs = obterTodasConfiguracoes();
    
  // Filtrar a configuração a ser excluída
  configs = configs.filter(c => c.id !== id);
    
  // Salvar configurações atualizadas
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(configs));
  }
  catch (e) {
    console.error('Erro ao excluir configuração:', e);
    mostrarNotificacao('Erro ao excluir configuração.', 'erro');
    return;
  }
    
  // Atualizar lista de configurações
  carregarConfiguracoesNoModal();
    
  // Mostrar notificação
  mostrarNotificacao('Configuração excluída com sucesso!');
}

/**
 * Obtém todas as configurações salvas
 * @returns {Array} - Lista de configurações
 */
function obterTodasConfiguracoes() {
  try {
    const configs = localStorage.getItem(STORAGE_KEY);
    return configs ? JSON.parse(configs) : [];
  }
  catch (e) {
    console.error('Erro ao obter configurações:', e);
    return [];
  }
}

/**
 * Aplica uma configuração aos campos do formulário
 * @param {Object} config - Configuração a ser aplicada
 */
function aplicarConfiguracao(config) {
  if (!config) {
    console.warn('Configuração vazia ou inválida para aplicar');
    return;
  }
    
  // Campos a serem atualizados
  const campos = {
    parceiroInput: config.parceiro || '',
    clienteInput: config.cliente || '',
    ambienteInput: config.ambiente || '',
    larguraInput: config.largura || 700,
    alturaInput: config.altura || 2100,
    quantidadeInput: config.quantidade || 1,
    vidroTipo: config.vidroTipo || config.vidro || 'Incolor',
    perfilModelo: config.perfilModelo || 'RM-114',
    perfilCor: config.perfilCor || 'Preto',
    funcaoPorta: config.funcao || 'superiorDireita',
    modeloDeslizante: config.modeloDeslizante || 'RO-654025',
    numDobradicasInput: config.numDobradicas || 4,
    puxadorModelo: config.puxador?.modelo || 'Cielo',
    puxadorMedida: config.puxador?.medida || '150',
    puxadorPosicao: config.puxador?.posicao || 'vertical',
    puxadorCotaSuperior: config.puxador?.cotaSuperior || 950,
    puxadorCotaInferior: config.puxador?.cotaInferior || 1000,
    observacaoInput: config.descricao || config.observacao || ''
  };
    
  // Atualizar cada campo
  Object.keys(campos).forEach(campo => {
    const elemento = document.getElementById(campo);
    if (elemento) {
      elemento.value = campos[campo];
      console.log(`[CONFIG] Campo ${campo} atualizado para ${campos[campo]}`);
    }
    else {
      console.warn(`[CONFIG] Elemento ${campo} não encontrado`);
    }
  });
    
  // Atualizar visibilidade dos campos de cota do puxador
  const posicaoPuxador = config.puxador?.posicao || 'vertical';
  const cotasVertical = document.getElementById('cotasVertical');
  const cotasHorizontal = document.getElementById('cotasHorizontal');
    
  if (cotasVertical && cotasHorizontal) {
    if (posicaoPuxador === 'vertical') {
      cotasVertical.style.display = 'block';
      cotasHorizontal.style.display = 'none';
    }
    else {
      cotasVertical.style.display = 'none';
      cotasHorizontal.style.display = 'block';
    }
  }
    
  // Atualizar a configuração atual
  atualizarConfiguracao(config);
    
  // Atualizar campos dependentes
  atualizarCamposDependentes();
    
  // Atualizar o desenho
  atualizarDesenho();
}

/**
 * Atualiza campos que dependem de outros campos
 */
function atualizarCamposDependentes() {
  // Atualizar campos de dobradiças
  updateDobradicaInputs();
    
  // Atualizar visibilidade dos campos de função
  const funcaoPorta = document.getElementById('funcaoPorta');
  if (funcaoPorta) {
    const event = new Event('change');
    funcaoPorta.dispatchEvent(event);
  }
    
  // Atualizar visibilidade do campo de deslocamento
  const puxadorDeslocOption = document.getElementById('puxadorDeslocOption');
  if (puxadorDeslocOption) {
    const event = new Event('change');
    puxadorDeslocOption.dispatchEvent(event);
  }
    
  // Atualizar título do pedido
  const parceiroInput = document.getElementById('parceiroInput');
  const parceiroNome = document.getElementById('parceiro-nome');
  const tituloPedidoImpressao = document.getElementById('tituloPedidoImpressao');
    
  if (parceiroInput && parceiroNome) {
    parceiroNome.textContent = parceiroInput.value || 'Selecione';
  }
    
  if (parceiroInput && tituloPedidoImpressao) {
    tituloPedidoImpressao.textContent = `Pedido | ${parceiroInput.value || 'Selecione'}`;
  }
    
  // Atualizar descrição da impressão
  const descricaoInput = document.getElementById('descricaoInput');
  const descricaoPedidoImpressao = document.getElementById('descricaoPedidoImpressao');
    
  if (descricaoInput && descricaoPedidoImpressao) {
    descricaoPedidoImpressao.textContent = descricaoInput.value;
  }
}

/**
 * Carrega a última configuração usada
 */
function carregarUltimaConfiguracao() {
  try {
    const ultimaConfig = localStorage.getItem(LAST_CONFIG_KEY);
    if (ultimaConfig) {
      const config = JSON.parse(ultimaConfig);
      aplicarConfiguracao(config.dados);
    }
  }
  catch (e) {
    console.warn('Erro ao carregar última configuração:', e);
  }
}

/**
 * Carrega o logo da empresa do localStorage
 * @returns {string|null} URL do logo ou null se não existir
 */
function carregarLogo() {
  try {
    return localStorage.getItem(LOGO_KEY);
  }
  catch (e) {
    console.warn('Erro ao carregar logo:', e);
    return null;
  }
}

/**
 * Salva o logo da empresa no localStorage
 * @param {string} logoUrl URL do logo em formato data URL
 * @returns {boolean} true se salvou com sucesso, false caso contrário
 */
function salvarLogoNoStorage(logoUrl) {
  try {
    localStorage.setItem(LOGO_KEY, logoUrl);
    return true;
  }
  catch (e) {
    console.error('Erro ao salvar logo:', e);
    throw e;
  }
}

/**
 * Carrega os projetos salvos do localStorage
 * @returns {Array} Lista de projetos
 */
function carregarProjetos() {
  try {
    const projetos = localStorage.getItem(STORAGE_KEY);
    return projetos ? JSON.parse(projetos) : [];
  }
  catch (e) {
    console.warn('Erro ao carregar projetos:', e);
    return [];
  }
}

/**
 * Salva a configuração atual com um nome gerado automaticamente (data/hora)
 * Esta função permite salvar o projeto rapidamente com um clique
 * @returns {boolean} - true se salvou com sucesso, false caso contrário
 */
function salvarConfiguracaoRapida() {
  try {
    // Obter configuração atual
    const configAtual = obterConfiguracaoAtual();
    
    // Gerar nome baseado na data e hora atual
    const agora = new Date();
    const dataFormatada = agora.toLocaleDateString('pt-BR').replace(/\//g, '-');
    const horaFormatada = agora.toLocaleTimeString('pt-BR').substring(0, 5);
    const nome = `Porta ${configAtual.largura}x${configAtual.altura} - ${dataFormatada} ${horaFormatada}`;
    
    // Preparar dados para salvar
    const configuracao = {
      id: Date.now().toString(),
      nome: nome,
      data: agora.toISOString(),
      dados: configAtual
    };
    
    // Salvar configuração
    salvarConfiguracao(configuracao);
    
    // Mostrar notificação
    mostrarNotificacao(`Projeto salvo como "${nome}"`, 'success');
    
    return true;
  }
  catch (e) {
    console.error('Erro ao salvar configuração rápida:', e);
    mostrarNotificacao('Erro ao salvar o projeto.', 'error');
    return false;
  }
}

// Exportar funções necessárias
export {
  inicializarArmazenamento,
  carregarConfiguracoesNoModal,
  criarItemConfiguracao,
  salvarConfiguracaoAtual,
  salvarConfiguracao,
  carregarConfiguracao,
  excluirConfiguracao,
  obterTodasConfiguracoes,
  aplicarConfiguracao,
  atualizarCamposDependentes,
  carregarUltimaConfiguracao,
  carregarLogo,
  salvarLogoNoStorage,
  carregarProjetos,
  salvarConfiguracaoRapida
}; 