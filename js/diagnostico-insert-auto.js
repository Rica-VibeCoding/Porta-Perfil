// ========================================
// DIAGN√ìSTICO AUTOM√ÅTICO - INSER√á√ÉO SUPABASE
// ========================================

console.log('üîç [DIAGN√ìSTICO AUTO] Iniciando diagn√≥stico autom√°tico...');

/**
 * Executa diagn√≥stico autom√°tico ao carregar a p√°gina
 */
async function diagnosticoAutomatico() {
  console.log('');
  console.log('üîç ========================================');
  console.log('üîç DIAGN√ìSTICO AUTOM√ÅTICO - INSER√á√ÉO SUPABASE');
  console.log('üîç ========================================');
  
  const resultado = {
    supabaseDisponivel: false,
    conectividadeOk: false,
    usuarioValido: false,
    erroEncontrado: null,
    solucaoSugerida: null
  };
  
  try {
    // STEP 1: Verificar Supabase
    console.log('1Ô∏è‚É£ Verificando Supabase...');
    
    if (!window.supabase && !window.supabaseCliente) {
      resultado.erroEncontrado = 'Cliente Supabase n√£o encontrado';
      resultado.solucaoSugerida = 'Verificar se os scripts do Supabase foram carregados';
      console.log('‚ùå ERRO: Cliente Supabase n√£o encontrado');
      return resultado;
    }
    
    resultado.supabaseDisponivel = true;
    const client = window.supabase || window.supabaseCliente;
    console.log('‚úÖ Cliente Supabase encontrado');
    
    // STEP 2: Teste de conectividade
    console.log('2Ô∏è‚É£ Testando conectividade...');
    
    try {
      const { data, error } = await client.select('usuarios', { limit: 1 });
      
      if (error) {
        resultado.erroEncontrado = `Erro de conectividade: ${error.message}`;
        
        if (error.message?.includes('406')) {
          resultado.solucaoSugerida = 'Erro 406 - Verificar headers da requisi√ß√£o';
        } else if (error.message?.includes('401')) {
          resultado.solucaoSugerida = 'Erro 401 - Verificar chave API do Supabase';
        } else if (error.message?.includes('CORS')) {
          resultado.solucaoSugerida = 'Erro CORS - Verificar configura√ß√£o de dom√≠nio no Supabase';
        } else {
          resultado.solucaoSugerida = 'Verificar logs do console para mais detalhes';
        }
        
        console.log('‚ùå ERRO de conectividade:', error.message);
        return resultado;
      }
      
      resultado.conectividadeOk = true;
      console.log('‚úÖ Conectividade OK');
      
    } catch (connectError) {
      resultado.erroEncontrado = `Exce√ß√£o de conectividade: ${connectError.message}`;
      resultado.solucaoSugerida = 'Verificar configura√ß√£o de rede e Supabase';
      console.log('‚ùå EXCE√á√ÉO de conectividade:', connectError.message);
      return resultado;
    }
    
    // STEP 3: Verificar usu√°rio
    console.log('3Ô∏è‚É£ Verificando usu√°rio...');
    
    let usuario;
    try {
      if (typeof window.fixUsuarioNaoEncontrado === 'function') {
        usuario = await window.fixUsuarioNaoEncontrado();
      } else {
        usuario = window.usuarioTemporario || { id: 'temp-' + Date.now() };
      }
      
      if (!usuario || !usuario.id) {
        resultado.erroEncontrado = 'Usu√°rio inv√°lido ou n√£o encontrado';
        resultado.solucaoSugerida = 'Executar fixUsuarioNaoEncontrado() ou definir usu√°rio tempor√°rio';
        console.log('‚ùå ERRO: Usu√°rio inv√°lido');
        return resultado;
      }
      
      resultado.usuarioValido = true;
      console.log('‚úÖ Usu√°rio v√°lido:', usuario.id);
      
    } catch (userError) {
      resultado.erroEncontrado = `Erro ao obter usu√°rio: ${userError.message}`;
      resultado.solucaoSugerida = 'Verificar fun√ß√£o de autentica√ß√£o de usu√°rio';
      console.log('‚ùå ERRO ao obter usu√°rio:', userError.message);
      return resultado;
    }
    
    // STEP 4: Teste de inser√ß√£o simples
    console.log('4Ô∏è‚É£ Testando inser√ß√£o...');
    
    const dadosTeste = {
      modelo: `TESTE-DIAG-${Date.now()}`,
      fabricante: 'Diagn√≥stico',
      cor: 'Teste',
      medida: '100mm',
      id_usuario: usuario.id
    };
    
    try {
      const { data: insertData, error: insertError } = await client.insert('puxadores', [dadosTeste]);
      
      if (insertError) {
        resultado.erroEncontrado = `Erro na inser√ß√£o: ${insertError.message}`;
        
        // Diagn√≥stico espec√≠fico por c√≥digo de erro
        if (insertError.code === '23505') {
          resultado.solucaoSugerida = 'Viola√ß√£o de chave √∫nica - Verificar dados duplicados';
        } else if (insertError.code === '23502') {
          resultado.solucaoSugerida = 'Campo obrigat√≥rio faltando - Verificar estrutura da tabela';
        } else if (insertError.code === '42703') {
          resultado.solucaoSugerida = 'Coluna inexistente - Verificar schema da tabela';
        } else if (insertError.message?.includes('406')) {
          resultado.solucaoSugerida = 'Erro 406 - Executar fixErro406Supabase()';
        } else {
          resultado.solucaoSugerida = 'Verificar logs detalhados com debugInsertSupabase()';
        }
        
        console.log('‚ùå ERRO na inser√ß√£o:', insertError);
        console.log('   C√≥digo:', insertError.code);
        console.log('   Mensagem:', insertError.message);
        return resultado;
      }
      
      console.log('‚úÖ INSER√á√ÉO BEM-SUCEDIDA!');
      console.log('   Dados inseridos:', insertData);
      resultado.solucaoSugerida = 'Sistema funcionando corretamente';
      
    } catch (insertException) {
      resultado.erroEncontrado = `Exce√ß√£o na inser√ß√£o: ${insertException.message}`;
      resultado.solucaoSugerida = 'Verificar configura√ß√£o geral do Supabase';
      console.log('‚ùå EXCE√á√ÉO na inser√ß√£o:', insertException.message);
      return resultado;
    }
    
    console.log('');
    console.log('üéâ DIAGN√ìSTICO CONCLU√çDO: SISTEMA OK!');
    return resultado;
    
  } catch (error) {
    resultado.erroEncontrado = `Erro geral: ${error.message}`;
    resultado.solucaoSugerida = 'Verificar console para stack trace completo';
    console.log('‚ùå ERRO GERAL no diagn√≥stico:', error);
    return resultado;
  }
}

/**
 * Mostra resumo do diagn√≥stico
 */
function mostrarResumoDiagnostico(resultado) {
  console.log('');
  console.log('üìã ========================================');
  console.log('üìã RESUMO DO DIAGN√ìSTICO');
  console.log('üìã ========================================');
  console.log('   Supabase Dispon√≠vel:', resultado.supabaseDisponivel ? '‚úÖ' : '‚ùå');
  console.log('   Conectividade OK:', resultado.conectividadeOk ? '‚úÖ' : '‚ùå');
  console.log('   Usu√°rio V√°lido:', resultado.usuarioValido ? '‚úÖ' : '‚ùå');
  
  if (resultado.erroEncontrado) {
    console.log('');
    console.log('‚ùå ERRO ENCONTRADO:', resultado.erroEncontrado);
    console.log('üí° SOLU√á√ÉO SUGERIDA:', resultado.solucaoSugerida);
    console.log('');
    console.log('üîß COMANDOS PARA CORRE√á√ÉO:');
    
    if (resultado.solucaoSugerida?.includes('fixErro406Supabase')) {
      console.log('   fixErro406Supabase()');
    }
    if (resultado.solucaoSugerida?.includes('fixUsuarioNaoEncontrado')) {
      console.log('   fixUsuarioNaoEncontrado()');
    }
    if (resultado.solucaoSugerida?.includes('debugInsertSupabase')) {
      console.log('   debugInsertSupabase()');
    }
  } else {
    console.log('');
    console.log('üéâ SISTEMA FUNCIONANDO CORRETAMENTE!');
  }
  
  console.log('');
}

/**
 * Executar diagn√≥stico autom√°tico ap√≥s carregamento
 */
window.addEventListener('load', async () => {
  // Aguardar um pouco para garantir que tudo foi carregado
  setTimeout(async () => {
    try {
      const resultado = await diagnosticoAutomatico();
      mostrarResumoDiagnostico(resultado);
      
      // Salvar resultado para consulta posterior
      window.ultimoDiagnostico = resultado;
      
    } catch (error) {
      console.log('‚ùå Erro ao executar diagn√≥stico autom√°tico:', error);
    }
  }, 2000); // 2 segundos de delay
});

// Expor fun√ß√£o para execu√ß√£o manual
window.executarDiagnostico = async function() {
  const resultado = await diagnosticoAutomatico();
  mostrarResumoDiagnostico(resultado);
  return resultado;
};

console.log('‚úÖ Diagn√≥stico autom√°tico configurado');
console.log('üí° Execute manualmente com: executarDiagnostico()'); 