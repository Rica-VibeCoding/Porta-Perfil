/**
 * Corre√ß√µes para os principais problemas identificados nos erros
 * Arquivo: refactoring-fixes.js
 * Vibecode - Portas e Perfis
 */

/**
 * Fun√ß√£o auxiliar para valida√ß√£o robusta de usu√°rio
 * Substitui a fun√ß√£o problem√°tica em cadastro-supabase.js
 */
window.validateCurrentUserSafely = function() {
  try {
    // Verifica se auth.js est√° carregado e getCurrentUser est√° dispon√≠vel
    if (typeof getCurrentUser === 'undefined') {
      console.error('‚ùå getCurrentUser n√£o est√° dispon√≠vel');
      throw new Error('Sistema de autentica√ß√£o n√£o inicializado');
    }

    const usuarioAtual = getCurrentUser();
    
    console.log('üîç Validando usu√°rio:', {
      usuario: usuarioAtual,
      id: usuarioAtual && usuarioAtual.id,
      tipo: usuarioAtual && typeof usuarioAtual.id
    });
    
    // Valida√ß√µes robustas do usu√°rio
    if (!usuarioAtual) {
      console.error('‚ùå Usu√°rio n√£o encontrado');
      throw new Error('Usu√°rio n√£o autenticado. Fa√ßa login novamente.');
    }
    
    if (!usuarioAtual.id) {
      console.error('‚ùå ID de usu√°rio ausente');
      throw new Error('ID de usu√°rio inv√°lido. Fa√ßa logout e login novamente.');
    }
    
    // Verificar se √© ID tempor√°rio (causa comum do erro)
    if (usuarioAtual.id.toString().startsWith('temp-')) {
      console.error('‚ùå ID tempor√°rio detectado:', usuarioAtual.id);
      throw new Error('ID de usu√°rio tempor√°rio. Fa√ßa logout e login novamente.');
    }
    
    // Verificar formato UUID b√°sico (para evitar viola√ß√£o de FK)
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(usuarioAtual.id)) {
      console.error('‚ùå Formato UUID inv√°lido:', usuarioAtual.id);
      throw new Error('Formato de ID de usu√°rio inv√°lido. Fa√ßa logout e login novamente.');
    }

    console.log('‚úÖ Usu√°rio validado com sucesso:', usuarioAtual.id);
    return usuarioAtual;
  } catch (error) {
    console.error('üí• Erro na valida√ß√£o do usu√°rio:', error);
    // Re-throw com contexto mais espec√≠fico
    if (error.message.includes('Usu√°rio n√£o autenticado') || 
        error.message.includes('ID de usu√°rio') ||
        error.message.includes('tempor√°rio') ||
        error.message.includes('inv√°lido')) {
      throw error; // Re-throw erros de valida√ß√£o espec√≠ficos
    }
    throw new Error(`Erro interno na valida√ß√£o de usu√°rio: ${error.message}`);
  }
};

/**
 * Fun√ß√£o auxiliar para tratamento seguro de salvamento no modal
 * Substitui as fun√ß√µes problem√°ticas em modal-coordinator.js e cadastro-modal.js
 */
window.handleModalSaveSafely = async function(tipo, event) {
  if (event) {
    try {
      event.preventDefault();
      event.stopPropagation();
    } catch (e) {
      console.warn('Erro ao prevenir evento:', e);
    }
  }

  try {
    // Verificar se tipo √© v√°lido
    if (!tipo || !['puxador', 'trilho', 'vidro'].includes(tipo)) {
      throw new Error(`Tipo inv√°lido ou n√£o especificado: ${tipo}`);
    }

    // Verificar se CadastroFormularios est√° dispon√≠vel
    if (!window.CadastroFormularios) {
      throw new Error('CadastroFormularios n√£o dispon√≠vel');
    }

    // Extrair dados do formul√°rio
    const dados = window.CadastroFormularios.extrairDados(tipo);
    
    console.log(`üíæ Salvando ${tipo}:`, dados);
    
    // Validar dados b√°sicos
    if (!dados || typeof dados !== 'object') {
      throw new Error('Dados do formul√°rio s√£o inv√°lidos');
    }

    // Chamar API apropriada
    let resultado;
    const isEdicao = dados.id && dados.id.trim() !== '';
    
    switch (tipo) {
      case 'puxador':
        if (!window.PuxadoresAPI) {
          throw new Error('PuxadoresAPI n√£o dispon√≠vel');
        }
        if (isEdicao) {
          resultado = await window.PuxadoresAPI.atualizar(dados.id, dados);
        } else {
          resultado = await window.PuxadoresAPI.criar(dados);
        }
        break;
        
      case 'trilho':
        if (!window.TrilhosAPI) {
          throw new Error('TrilhosAPI n√£o dispon√≠vel');
        }
        if (isEdicao) {
          resultado = await window.TrilhosAPI.atualizar(dados.id, dados);
        } else {
          resultado = await window.TrilhosAPI.criar(dados);
        }
        break;
        
      case 'vidro':
        if (!window.VidrosAPI) {
          throw new Error('VidrosAPI n√£o dispon√≠vel');
        }
        if (isEdicao) {
          resultado = await window.VidrosAPI.atualizar(dados.id, dados);
        } else {
          resultado = await window.VidrosAPI.criar(dados);
        }
        break;
        
      default:
        throw new Error(`Tipo n√£o suportado: ${tipo}`);
    }
    
    if (resultado && resultado.success) {
      const acao = isEdicao ? 'atualizado' : 'salvo';
      if (window.CadastroNotificacoes) {
        window.CadastroNotificacoes.sucesso(`${tipo.charAt(0).toUpperCase() + tipo.slice(1)} ${acao} com sucesso!`);
      }
      
      // Fechar modal se dispon√≠vel
      if (window.modalCoordinator && window.modalCoordinator.closeModal) {
        window.modalCoordinator.closeModal();
      } else if (window.CadastroModalFactory) {
        const manager = window.CadastroModalFactory.getInstance();
        if (manager && manager.fecharModal) {
          manager.fecharModal();
        }
      }
      
      // Atualizar tabela correspondente
      updateTableAfterSave(tipo);
      
      return true;
    } else {
      throw new Error((resultado && resultado.error) || 'Erro desconhecido ao salvar');
    }

  } catch (error) {
    console.error(`Erro ao salvar ${tipo}:`, error);
    if (window.CadastroNotificacoes) {
      window.CadastroNotificacoes.erro(`Erro ao salvar ${tipo}: ${error.message}`);
    }
    return false;
  }
};

/**
 * Fun√ß√£o auxiliar para atualizar tabelas ap√≥s salvamento
 */
function updateTableAfterSave(tipo) {
  try {
    // Verificar se existem fun√ß√µes globais de carregamento
    switch (tipo) {
      case 'puxador':
        if (window.carregarPuxadores) {
          window.carregarPuxadores();
        } else if (window.inicializarCadastramento) {
          // For√ßa recarregamento dos dados
          setTimeout(() => {
            const event = new CustomEvent('recarregarPuxadores');
            document.dispatchEvent(event);
          }, 100);
        }
        break;
        
      case 'trilho':
        if (window.carregarTrilhos) {
          window.carregarTrilhos();
        } else {
          setTimeout(() => {
            const event = new CustomEvent('recarregarTrilhos');
            document.dispatchEvent(event);
          }, 100);
        }
        break;
        
      case 'vidro':
        if (window.carregarVidros) {
          window.carregarVidros();
        } else {
          setTimeout(() => {
            const event = new CustomEvent('recarregarVidros');
            document.dispatchEvent(event);
          }, 100);
        }
        break;
    }
  } catch (error) {
    console.warn(`Erro ao atualizar tabela de ${tipo}:`, error);
  }
}

/**
 * Fun√ß√£o para verificar e corrigir integridade do sistema de modais
 */
window.fixModalSystem = function() {
  console.log('üîß Iniciando corre√ß√£o do sistema de modais...');
  
  try {
    // Verificar se modal coordinator existe e corrigi-lo se necess√°rio
    if (window.modalCoordinator) {
      // Sobrescrever o handleSave problem√°tico
      if (window.modalCoordinator.handleSave) {
        const originalHandleSave = window.modalCoordinator.handleSave.bind(window.modalCoordinator);
        window.modalCoordinator.handleSave = async function(event) {
          const currentType = this.getCurrentType ? this.getCurrentType() : this.currentType;
          return await window.handleModalSaveSafely(currentType, event);
        };
        console.log('‚úÖ Modal coordinator handleSave corrigido');
      }
    }
    
    // Verificar se CadastroModalCoordinator existe e corrigi-lo
    if (window.CadastroModalFactory) {
      const coordinator = window.CadastroModalFactory.getCoordinator();
      if (coordinator && coordinator.handleSave) {
        coordinator.handleSave = async function(tipo, event) {
          return await window.handleModalSaveSafely(tipo, event);
        };
        console.log('‚úÖ CadastroModalCoordinator handleSave corrigido');
      }
    }
    
    console.log('‚úÖ Sistema de modais corrigido com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao corrigir sistema de modais:', error);
    return false;
  }
};

/**
 * Fun√ß√£o para corrigir problemas com verifica√ß√£o de usu√°rios
 */
window.fixUserValidation = function() {
  console.log('üë§ Corrigindo valida√ß√£o de usu√°rios...');
  
  try {
    // Sobrescrever a fun√ß√£o verificarUsuarioExiste para ser mais tolerante
    window.verificarUsuarioExisteSafe = async function(userId) {
      try {
        console.log('üîç Verifica√ß√£o segura de usu√°rio:', userId);
        
        if (!userId) {
          throw new Error('ID de usu√°rio √© obrigat√≥rio');
        }
        
        // Verificar se Supabase est√° dispon√≠vel
        if (!window.supabase) {
          console.warn('‚ö†Ô∏è Supabase n√£o dispon√≠vel - modo demo');
          return true; // Permitir em modo demo
        }
        
        // Tentar consultar tabela de usu√°rios
        const { data, error } = await window.supabase
          .from('usuarios')
          .select('id')
          .eq('id', userId)
          .single();
        
        if (error) {
          if (error.code === 'PGRST116') {
            // Usu√°rio n√£o encontrado - tentar criar
            console.log('üë§ Usu√°rio n√£o encontrado, tentando criar...');
            return await window.createUserIfNeeded(userId);
          }
          
          if (error.code === '42P01') {
            // Tabela n√£o existe - modo demo
            console.warn('‚ö†Ô∏è Tabela usuarios n√£o existe - modo demo ativado');
            return true;
          }
          
          throw error;
        }
        
        console.log('‚úÖ Usu√°rio existe no banco:', data.id);
        return true;
        
      } catch (error) {
        console.error('üí• Erro na verifica√ß√£o de usu√°rio:', error);
        
        // Em caso de erro, n√£o bloquear o sistema
        console.warn('‚ö†Ô∏è Pulando verifica√ß√£o de usu√°rio devido ao erro');
        return true;
      }
    };
    
    // Fun√ß√£o auxiliar para criar usu√°rio se necess√°rio
    window.createUserIfNeeded = async function(userId) {
      try {
        // Obter dados do usu√°rio atual
        const userData = getCurrentUser ? getCurrentUser() : null;
        
        if (!userData) {
          console.warn('‚ö†Ô∏è Dados de usu√°rio n√£o dispon√≠veis');
          return true; // Permitir mesmo assim
        }
        
        const novoUsuario = {
          id: userId,
          email: userData.email || 'usuario@demo.com',
          nome: userData.nome || 'Usu√°rio Demo',
          perfil: userData.perfil || 'usu√°rio',
          ativo: true,
          criado_em: new Date().toISOString()
        };
        
        const { data, error } = await window.supabase
          .from('usuarios')
          .insert(novoUsuario)
          .select()
          .single();
        
        if (error) {
          console.error('‚ùå Erro ao criar usu√°rio:', error);
          return true; // N√£o bloquear mesmo se n√£o conseguir criar
        }
        
        console.log('‚úÖ Usu√°rio criado automaticamente:', data);
        return true;
        
      } catch (error) {
        console.error('üí• Erro ao criar usu√°rio:', error);
        return true; // N√£o bloquear o sistema
      }
    };
    
    console.log('‚úÖ Valida√ß√£o de usu√°rios corrigida');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir valida√ß√£o de usu√°rios:', error);
    return false;
  }
};

/**
 * Inicializar corre√ß√µes automaticamente quando o DOM estiver pronto
 */
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ Aplicando corre√ß√µes autom√°ticas...');
  
  // Aguardar um pouco para garantir que outros scripts carregaram
  setTimeout(() => {
    window.fixModalSystem();
    window.fixUserValidation();
  }, 1000);
});

console.log('üì¶ Arquivo de corre√ß√µes carregado'); 